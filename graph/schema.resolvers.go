package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"crypto/rand"
	"fmt"
	"math/big"
	"portfolio-api/graph/model"
)

// CreateApp is the resolver for the createApp field.
func (r *mutationResolver) CreateApp(ctx context.Context, input model.NewApp) (*model.App, error) {
	randNumber, _ := rand.Int(rand.Reader, big.NewInt(100))
	app := &model.App{
		ID:          fmt.Sprintf("T%d", randNumber),
		Title:       input.Title,
		Description: input.Description,
		Link:        input.Link,
		LinkType:    input.LinkType,
		ImageURL: 	input.ImageURL,
	}
	r.apps = append(r.apps, app)
	return app, nil
}

// Apps is the resolver for the apps field.
func (r *queryResolver) Apps(ctx context.Context) ([]*model.App, error) {
	return r.Srv.GetApps(ctx)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
